ggplot(data=FloridaLakes, aes(y=Mercury, x=pH)) +
geom_point() + stat_smooth(method="lm", se=FALSE)
M <- lm(data=FloridaLakes, Mercury~pH)
M
BootstrapSample1 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)   # take bootstrap sample
BootstrapSample1
Mb1 <- lm(data=BootstrapSample1, Mercury ~ pH) # fit linear model
Mb1
BootstrapSample2 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)
BootstrapSample2
Mb2 <- lm(data=BootstrapSample2, Mercury ~ pH) # fit linear model
Mb2
BootstrapSample3 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)
BootstrapSample3
Mb3 <- lm(data=BootstrapSample3, Mercury ~ pH) # fit linear model
Mb3
M <- lm(data=FloridaLakes, Mercury~pH) #fit model to original sample
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes , 53, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, Mercury ~ pH) # fit linear model
Bootstrap_b1[i] <- M$coefficients[2] # record b1
}
Lakes_Bootstrap_Slope_Results <- data.frame(Bootstrap_b1)  #save results as dataframe
Lakes_Bootstrap_Plot_Slope <- ggplot(data=Lakes_Bootstrap_Slope_Results, aes(x=Bootstrap_b1)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Slope in Bootstrap Sample") + ylab("Frequency") +
ggtitle("Bootstrap Distribution for Slope")
Lakes_Bootstrap_Plot_Slope
SE_b1 <- sd(Lakes_Bootstrap_Slope_Results$Bootstrap_b1)
SE_b1
c(Sample_b1 - 2*SE_b1, Sample_b1 + 2*SE_b1)
Lakes_Bootstrap_Plot_Slope +
geom_segment(aes(x=Sample_b1 - 2*SE_b1,xend=Sample_b1 + 2*SE_b1, y=50, yend=50),
color="gold", size=10, alpha=0.01)
BootstrapSample1 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)   # take bootstrap sample
BootstrapSample1
Mb1 <- lm(data=BootstrapSample1, Mercury ~ pH) ## fit linear model
b0 <- Mb1$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb1$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
BootstrapSample2 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)
BootstrapSample2
Mb2 <- lm(data=BootstrapSample2, Mercury ~ pH) # fit linear model
b0 <- Mb2$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb2$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
BootstrapSample3 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>%
select(ID, Lake, pH, Mercury)
BootstrapSample3
Mb3 <- lm(data=BootstrapSample3, Mercury ~ pH) # fit linear model
b0 <- Mb3$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb3$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
M <- lm(data=FloridaLakes, Mercury~pH) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_Exp7 <- Sample_b0 + 7*Sample_b1 # calculate sample expected mercury when pH=7
Bootstrap_b0 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes , 53, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, Mercury ~ pH) # fit linear model
Bootstrap_b0[i] <- M$coefficients[1] # record b0
Bootstrap_b1[i] <- M$coefficients[2] # record b1
}
Bootstrap_Exp7 <-  Bootstrap_b0 + 7*Bootstrap_b1 # calcualte expected response for each bootstrap sample
Lakes_Bootstrap_Exp7_Results <- data.frame(Bootstrap_b0, Bootstrap_b1, Bootstrap_Exp7)  #save results as dataframe
Lakes_Bootstrap_Plot_Exp7 <- ggplot(data=Lakes_Bootstrap_Exp7_Results, aes(x=Bootstrap_Exp7)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Expected Mercury Level in Bootstrap Sample") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution for Exp. Mercury when pH=7")
Lakes_Bootstrap_Plot_Exp7
SE_Exp7 <- sd(Lakes_Bootstrap_Exp7_Results$Bootstrap_Exp7)
SE_Exp7
c(Sample_Exp7 - 2*SE_Exp7, Sample_Exp7 + 2*SE_Exp7)
Lakes_Bootstrap_Plot_Exp7 +
geom_segment(aes(x=Sample_Exp7 - 2*SE_Exp7,xend=Sample_Exp7 + 2*SE_Exp7, y=50, yend=50),
color="gold", size=10, alpha=0.01)
M <- lm(data=Houses, price~sqft_living + waterfront +
sqft_living:waterfront) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_b2 <- M$coefficients[3] # record b1 value (second coefficient)
Sample_b3 <- M$coefficients[4] # record b1 value (second coefficient)
M
2000*Sample_b1 +Sample_b2+2000*Sample_b3 # calculate b0+2000b1+b2+2000b3
Sample_b0 + 1500*Sample_b1 # calculate b0+1500b1+
Sample_b2+1800*Sample_b3 # calculate b2+1800b3
100*Sample_b3 # calculate 100b3
BootstrapSample1 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>%
select(Id, price, sqft_living, waterfront)
Mb1 <- lm(data=BootstrapSample1, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb1$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb1$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb1$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb1$coefficients[4] # record value of b3 (fourth coefficient)
Mb1
b0+2000*b1 + b2 + 2000*b3
b0+1500*b1
b2+1800*b3
100*b3
BootstrapSample2 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>%
select(Id, price, sqft_living, waterfront)
Mb2 <- lm(data=BootstrapSample2, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb2$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb2$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb2$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb2$coefficients[4] # record value of b3 (fourth coefficient)
Mb2
b0+2000*b1 + b2 + 2000*b3
b0+1500*b1
b2+1800*b3
100*b3
BootstrapSample3 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>%
select(Id, price, sqft_living, waterfront)
Mb3 <- lm(data=BootstrapSample3, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb3$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb3$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb3$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb3$coefficients[4] # record value of b3 (fourth coefficient)
Mb3
b0+2000*b1 + b2 + 2000*b3
b0+1500*b1
b2+1800*b3
100*b3
M <- lm(data=Houses, price~sqft_living + waterfront +
sqft_living:waterfront) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_b2 <- M$coefficients[3] # record b1 value (second coefficient)
Sample_b3 <- M$coefficients[4] # record b1 value (second coefficient)
Sample_Q1 <- Sample_b0 + 2000*Sample_b1 +Sample_b2+2000*Sample_b3 # calculate b0+2000b1+b2+2000b3
Sample_Q2 <- Sample_b0 + 1500*Sample_b1 # calculate b0+1500b1+
Sample_Q3 <- Sample_b2+1800*Sample_b3 # calculate b2+1800b3
Sample_Q4 <- 100*Sample_b3 # calculate 100b3
Bootstrap_b0 <- rep(NA, 10000)  #vector to store b0 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b2 <- rep(NA, 10000)  #vector to store b2 values
Bootstrap_b3 <- rep(NA, 10000)  #vector to store b3 values
for (i in 1:10000){
BootstrapSample <- sample_n(Houses, 1000, replace=TRUE)   #take bootstrap sample
Mb <- lm(data=BootstrapSample, price ~ sqft_living +
waterfront + sqft_living:waterfront) # fit linear model with interaction
Bootstrap_b0[i] <- Mb$coefficients[1] # record value of b0 (first coefficient)
Bootstrap_b1[i] <- Mb$coefficients[2] # record value of b1 (second coefficient)
Bootstrap_b2[i] <- Mb$coefficients[3] # record value of b2 (third coefficient)
Bootstrap_b3[i] <- Mb$coefficients[4] # record value of b3 (fourth coefficient)
}
Bootstrap_Q1 <-  Bootstrap_b0 + 2000*Bootstrap_b1 + Bootstrap_b2 + 2000*Bootstrap_b3
Bootstrap_Q2 <-  Bootstrap_b0 + 1500*Bootstrap_b1
Bootstrap_Q3 <-  Bootstrap_b2 + 1800*Bootstrap_b3
Bootstrap_Q4 <-  100*Bootstrap_b3
Houses_Bootstrap_Results <- data.frame(Bootstrap_b0, Bootstrap_b1, Bootstrap_b2, Bootstrap_b3, Bootstrap_Q1, Bootstrap_Q2 , Bootstrap_Q3 , Bootstrap_Q4)  #save results as dataframe
Houses_Bootstrap_Plot_Q1 <- ggplot(data=Houses_Bootstrap_Results,
aes(x=Bootstrap_Q1)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Expected Price of 2000 Sq. Ft. Waterfront House") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution b0+2000b1+b2+2000b3")
Houses_Bootstrap_Plot_Q1
SE_Q1 <- sd(Houses_Bootstrap_Results$Bootstrap_Q1)
SE_Q1
c(Sample_Q1 - 2*SE_Q1, Sample_Q1 + 2*SE_Q1)
Houses_Bootstrap_Plot_Q1 +
geom_segment(aes(x=Sample_Q1 - 2*SE_Q1,xend=Sample_Q1 + 2*SE_Q1, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Houses_Bootstrap_Plot_Q2 <- ggplot(data=Houses_Bootstrap_Results,
aes(x=Bootstrap_Q2)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Expected Price of 1500 Sq. Ft. Non-Waterfront House") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution b0+1500b1")
Houses_Bootstrap_Plot_Q2
SE_Q2 <- sd(Houses_Bootstrap_Results$Bootstrap_Q2)
SE_Q2
c(Sample_Q2 - 2*SE_Q2, Sample_Q2 + 2*SE_Q2)
Houses_Bootstrap_Plot_Q2 +
geom_segment(aes(x=Sample_Q2 - 2*SE_Q2,xend=Sample_Q2 + 2*SE_Q2, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Houses_Bootstrap_Plot_Q3 <- ggplot(data=Houses_Bootstrap_Results,
aes(x=Bootstrap_Q3)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Expected Price Difference WF vs NWF for 1800 sq. Ft. House") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution b2+1800b3")
Houses_Bootstrap_Plot_Q3
SE_Q3 <- sd(Houses_Bootstrap_Results$Bootstrap_Q3)
SE_Q3
c(Sample_Q3 - 2*SE_Q3, Sample_Q3 + 2*SE_Q3)
Houses_Bootstrap_Plot_Q3 +
geom_segment(aes(x=Sample_Q3 - 2*SE_Q3,xend=Sample_Q3 + 2*SE_Q3, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Houses_Bootstrap_Plot_Q4 <- ggplot(data=Houses_Bootstrap_Results,
aes(x=Bootstrap_Q4)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Expected Difference per 100 square feet") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution 100b3")
Houses_Bootstrap_Plot_Q4
SE_Q4 <- sd(Houses_Bootstrap_Results$Bootstrap_Q4)
SE_Q4
c(Sample_Q4 - 2*SE_Q4, Sample_Q4 + 2*SE_Q4)
Houses_Bootstrap_Plot_Q4 +
geom_segment(aes(x=Sample_Q4 - 2*SE_Q4,xend=Sample_Q4 + 2*SE_Q4, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Lakes_Hist
sd(FloridaLakes$Mercury)
Lakes_Bootstrap_Mean_Plot + xlim(c(0,1.5))
SE <- sd(Lakes_Bootstrap_Results_Mean$Bootstrap_Mean); SE
set.seed(10122022)
LakesSample10 <- sample_n(FloridaLakes, 10, replace=TRUE)
LakesSample30 <- sample_n(FloridaLakes, 30, replace=TRUE)
LakesSample100 <- sample_n(FloridaLakes, 1000, replace=TRUE)
Lakes_Hist10 <- ggplot(data=LakesSample10, aes(x=Mercury)) +
geom_histogram(color="white", fill="lightblue", binwidth = 0.2) +
ggtitle("n=10") +
xlab("Mercury Level") + ylab("Frequency") + xlim(c(-0.2,1.7))
Lakes_Hist30 <- ggplot(data=LakesSample30, aes(x=Mercury)) +
geom_histogram(color="white", fill="lightblue", binwidth = 0.2) +
ggtitle("n=30") +
xlab("Mercury Level") + ylab("Frequency") + xlim(c(-0.2,1.7))
Lakes_Hist53 <- Lakes_Hist + ggtitle("n=53") + xlim(c(-0.2,1.7))
Lakes_Hist100 <- ggplot(data=LakesSample100, aes(x=Mercury)) +
geom_histogram(color="white", fill="lightblue", binwidth = 0.2) +
ggtitle("n=100") +
xlab("Mercury Level") + ylab("Frequency") + xlim(c(-0.2,1.7))
grid.arrange(Lakes_Hist10, Lakes_Hist30, Lakes_Hist53,Lakes_Hist100, ncol=2)
SD10 <- sd(LakesSample10$Mercury)
SD30 <- sd(LakesSample30$Mercury)
SD53 <- sd(FloridaLakes$Mercury)
SD100 <- sd(LakesSample100$Mercury)
Sample_Size <- c(10,30,53,100)
SD <- c(SD10, SD30, SD53, SD100)
kable(data.frame(Sample_Size, SD))
MeanHg10 <- rep(NA, 10000)
MeanHg30 <- rep(NA, 10000)
MeanHg100 <- rep(NA, 10000)
for (i in 1:10000){
BootstrapSample <- sample_n(LakesSample10, 10, replace=TRUE)
MeanHg10[i] <- mean(BootstrapSample$Mercury)
BootstrapSample <- sample_n(LakesSample30, 30, replace=TRUE)
MeanHg30[i] <- mean(BootstrapSample$Mercury)
BootstrapSample <- sample_n(LakesSample100, 100, replace=TRUE)
MeanHg100[i] <- mean(BootstrapSample$Mercury)
}
Lakes_Bootstrap_Results_Mean_Comp <- data.frame(MeanHg10, MeanHg30, MeanHg100)
Lakes_Bootstrap_Mean10 <- ggplot(data=Lakes_Bootstrap_Results_Mean_Comp, aes(x=MeanHg10)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Sample Mean") + ylab("Frequency") +
ggtitle("n=10") + xlim(c(0,1)) +
theme(legend.position = "none")
Lakes_Bootstrap_Mean30 <- ggplot(data=Lakes_Bootstrap_Results_Mean_Comp, aes(x=MeanHg30)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Sample Mean") + ylab("Frequency") +
ggtitle("n=30") + xlim(c(0,1)) +
theme(legend.position = "none")
Lakes_Bootstrap_Mean53 <- Lakes_Bootstrap_Mean_Plot + ggtitle("n=53)") + xlim(c(0,1)) + xlab("Sample Mean")
Lakes_Bootstrap_Mean100 <- ggplot(data=Lakes_Bootstrap_Results_Mean_Comp, aes(x=MeanHg100)) +
geom_histogram(color="white", fill="lightblue", bins=60) +
xlab("Sample Mean") + ylab("Frequency") +
ggtitle("n=100") + xlim(c(0,1)) +
theme(legend.position = "none")
grid.arrange(Lakes_Bootstrap_Mean10, Lakes_Bootstrap_Mean30, Lakes_Bootstrap_Mean53, Lakes_Bootstrap_Mean100, ncol=2)
SE10 <- sd(Lakes_Bootstrap_Results_Mean_Comp$MeanHg10)
SE30 <- sd(Lakes_Bootstrap_Results_Mean_Comp$MeanHg30)
SE53 <- sd(Lakes_Bootstrap_Results_Mean$Bootstrap_Mean)
SE100 <- sd(Lakes_Bootstrap_Results_Mean_Comp$MeanHg100)
Sample_Size <- c(10,30,53,100)
SE <- c(SE10, SE30, SE53, SE100)
kable(data.frame(Sample_Size, SE))
sd(FloridaLakes$Mercury)/sqrt(53)
M <- lm(data=FloridaLakes, Mercury~1)
summary(M)
Lakes_Bootstrap_Mean_Plot
SE <- sd(Lakes_Bootstrap_Results_Mean$Bootstrap_Mean); SE
s <- sqrt(sum(Lakes_M$residuals^2)/(53-2))
SE <- s*sqrt(1/20+1/33); SE
Lakes_M <- lm(data=FloridaLakes, Mercury~Location)
summary(Lakes_M)
NS_Lakes_Bootstrap_Plot_b1 <- ggplot(data=NS_Lakes_Bootstrap_Results, aes(x=Bootstrap_b1)) +
geom_histogram(color="white", fill="lightblue") +
xlab("b1 in Bootstrap Sample") + ylab("Frequency") +
ggtitle("Northern vs Southern Lakes: Bootstrap Distribution for b1")
NS_Lakes_Bootstrap_Plot_b1
sd(NS_Lakes_Bootstrap_Results$Bootstrap_b1)
M <- lm(data=FloridaLakes, Mercury~pH) # fit model
s2 <- sum(M$residuals^2)/(53-2) #calculate s^2
x <- FloridaLakes$pH
SSx <- sum((x-mean(x))^2) #calculate denominator
SE <- sqrt(s2/SSx) # calculate SE
SE
Lakes_M_pH <- lm(data=FloridaLakes, Mercury~pH)
summary(Lakes_M_pH)
Lakes_Bootstrap_Plot_Slope
SE_b1 <- sd(Lakes_Bootstrap_Slope_Results$Bootstrap_b1)
SE_b1
confint(Lakes_M)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 3, fig.width = 7, cache=TRUE)
library(ggformula)
library(moderndive)
library(gridExtra)
library(skimr)
library(Bolstad)
library(GGally)
library(Lock5Data)
library(knitr)
library(caret)
library(MASS)
library(tidyverse)
options(scipen=999)
set.seed(07302020)
knitr::include_graphics("Ice_Cream.png")
set.seed(10082020)
time <- c(1, 1.2, 1.5, 1.8, 2.1, 2.1, 2.3, 2.5, 2.6, 2.8, 2.9, 2.9, 3.1, 3.2, 3.6)
signal <- 2*time
noise <-rnorm(15, 0, 0.5)
amount <- 2*time + noise
Icecream1 <- data.frame(time, amount)
ICplot0 <- ggplot(data=Icecream1, aes(x=time, y=signal)) + geom_point() + ggtitle("Icecream Dispensed without Accounting for Unknown Factors") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed") + geom_abline(slope=2, intercept=0, color="red") +
annotate("text", label="y=2x", x= 3.5, y=6.5, size=10, color="red")
ICplot0
ICplot <- ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle("Icecream Dispensed") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed")
ICplot + geom_abline(slope=2, intercept=0, color="red") +
annotate("text", label="y=2x", x= 3.5, y=6.5, size=10, color="red")
dnorm1 <- function(x){
dnorm(x, 0, 0.5)
}
df <- data.frame(x = seq(from=-4, to=4, by=0.1), y = dnorm(seq(from=-4, to=4, by=0.1), 0,1/sqrt(3)))
p <- ggplot(df, aes(x = x, y = y)) +
stat_function(fun=dnorm1,geom="line",color=scales::hue_pal()(3)[3]) +
annotate(geom="text", x=0, y=0.41, label="N(0,0.5)",
color=scales::hue_pal()(3)[3])
p
dnorm1 <- function(x){
dnorm(x, 0, 1)
}
dnorm2 <- function(x){
dnorm(x, 0, 2)
}
dnorm0.5 <- function(x){
dnorm(x, 0, 0.5)
}
df <- data.frame(x = seq(from=-4, to=4, by=0.1), y = dnorm(seq(from=-4, to=4, by=0.1), 0,1/sqrt(3)))
p <- ggplot(df, aes(x = x, y = y)) +
stat_function(fun=dnorm,geom="line",color=scales::hue_pal()(3)[1]) +
stat_function(fun=dnorm1, geom="line",color=scales::hue_pal()(3)[1]) +
annotate(geom="text", x=0, y=0.81, label="N(0,0.5)",
color=scales::hue_pal()(3)[3]) +
stat_function(fun=dnorm2, geom="line",color=scales::hue_pal()(3)[2]) +
annotate(geom="text", x=0, y=0.41, label="N(0,1)",
color=scales::hue_pal()(3)[1]) +
stat_function(fun=dnorm0.5, geom="line",color=scales::hue_pal()(3)[3]) +
annotate(geom="text", x=0, y=0.21, label="N(0,2)",
color=scales::hue_pal()(3)[2])
p
set.seed(10082020)
# set times
time <- c(1, 1.2, 1.5, 1.8, 2.1, 2.1, 2.3, 2.5, 2.6, 2.8, 2.9, 2.9, 3.1, 3.2, 3.6)
expected <- 2*time  # expected amount
noise <-rnorm(15, 0, 0.5) %>% round(2)  #generate noise from normal distribution
amount <- 2*time + noise  # calculate observed amounts
Icecream <- data.frame(time, signal, noise, amount) # set up data table
kable((Icecream)) #display table
ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle("Icecream Dispensed") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed") + geom_abline(slope=2, intercept=0, color="red") +
annotate("text", label="y=2x", x= 3.5, y=6.5, size=10, color="red")
ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle("Icecream Dispensed") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed") + stat_smooth(method="lm", se=FALSE) + geom_abline(slope=2, intercept=0, color="red") +
annotate("text", label="y=2x", x= 3.5, y=6.5, size=10, color="red")
IC_Model <- lm(data=Icecream1, lm(amount~time))
IC_Model
s <- sqrt(sum(IC_Model$residuals^2)/(15-2))
s
Lakes_M <- lm(data=FloridaLakes, Mercury~Location)
summary(Lakes_M)
gf_dist("t", df=3, color = ~ "3 df", kind = "density")  %>%
gf_dist("t", df=10, color = ~ "10 df", kind = "density") %>%
gf_dist("t", df=20, color = ~ "20 df", kind = "density") %>%
gf_dist("t", df=30, color = ~ "30 df", kind = "density") %>%
gf_dist("norm", color = ~ "N(0,1)", kind = "density") + xlim(c(-3,3))
dt1 <- function(x){
dt(x, df=3)
}
dt2 <- function(x){
dt(x, df=10)
}
dt3 <- function(x){
dt(x, df=20)
}
dt4 <- function(x){
dt(x, df=30)
}
df <- data.frame(x = seq(from=-3, to=3, by=0.1), y = dnorm(seq(from=-3, to=3, by=0.1), 0,1/sqrt(3)))
p <- ggplot(df, aes(x = x, y = y)) +
stat_function(fun=dnorm,geom="line",color=scales::hue_pal()(5)[1]) +
annotate(geom="text", x=0.5, y=0.4, label="N(0,1)",
color=scales::hue_pal()(5)[1]) +
stat_function(fun=dt1, geom="line",color=scales::hue_pal()(5)[2]) +
annotate(geom="text", x=0, y=0.35, label="t with 3 df",
color=scales::hue_pal()(5)[2]) +
stat_function(fun=dt2, geom="line",color=scales::hue_pal()(5)[3]) +
annotate(geom="text", x=0, y=0.37, label="t with 10 df",
color=scales::hue_pal()(5)[3]) +
stat_function(fun=dt3, geom="line",color=scales::hue_pal()(5)[4]) +
annotate(geom="text", x=0.5, y=0.38, label="t with 20 df",
color=scales::hue_pal()(5)[4]) +
stat_function(fun=dt, geom="line",color=scales::hue_pal()(5)[5]) +
annotate(geom="text", x=0.5, y=0.39, label="t with 30 df",
color=scales::hue_pal()(5)[5])
p
ts=3.027
gf_dist("t", df=51, geom = "area", fill = ~ (abs(x)< abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts, -ts), color="red")  + xlab("t")
2*pt(-abs(ts), df=51)
NSLakes_SimulationResultsPlot
b1 <- Lakes_M$coef[2] ## record value of b1 from actual data
mean(abs(NSLakes_SimulationResults$b1Sim) > abs(b1))
M_pH <- lm(data=FloridaLakes, Mercury~pH)
summary(M_pH)
ts=5.024
gf_dist("t", df=51, geom = "area", fill = ~ (abs(x)< abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts, -ts), color="red")  + xlab("t")
2*pt(-abs(ts), df=51)
M_wf_sqft <- lm(data=Houses, price~sqft_living+waterfront)
summary(M_wf_sqft)
M_House_Int <- lm(data=Houses, price ~ sqft_living * waterfront)
summary(M_House_Int)
gf_dist("f", df1=5, df2=5, color = ~ "5,5 df", kind = "density")  %>%
gf_dist("f", df1=5, df2=20, color = ~ "5,20 df", kind = "density") %>%
gf_dist("f", df1=20, df2=5, color = ~ "20,5 df", kind = "density") %>%
gf_dist("f", df1=20, df2=20, color = ~ "20,20 df", kind = "density") + xlim(c(0,10)) + xlab("F")
((SST - SSR_cond)/(2-0))/(SSR_cond/(100-(2+1)))
House_Cond_SimulationResults_Plot
mean(FSim > Fstat)
ts=0.605
gf_dist("f", df1=2, df2=97, geom = "area", fill = ~ (abs(x)< abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts), color="red")  + xlab("F")
1-pf(ts, df1=2, df2=97)
M_cond <- lm(data=Houses, price ~ condition)
M0 <- lm(data=Houses, price ~ 1)
anova(M0, M_cond)
((SSR_wf_sqft-SSR_int)/(3-2))/((SSR_int)/(100-(3+1)))
ts=60.41505
gf_dist("f", df1=1, df2=96, geom = "area", fill = ~ (abs(x)>! abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts), color="red")  + xlab("F")
1-pf(ts, df1=1, df2=96)
M_wf_SqFt <- lm(data=Houses, price~sqft_living + waterfront)
M_House_Int <- lm(data=Houses, price~sqft_living * waterfront)
anova(M_wf_SqFt, M_House_Int)
knitr::include_graphics("SLR_Model_Assumptions.png")
set.seed(10102021)
N <- 100
time <- runif(N, 1,3)
amount <- 2*time + rnorm(N, 0, 0.5)  ## no violation
amount_lin_viol <- 2*time^2 + rnorm(N, 0, 0.5) ## linearity violation
amount_norm_viol <- 2*time + 5*rexp(N, 1) -1
amount_cvar_viol <- 2*time + rnorm(N,0,time^2)
Violations <- data.frame(amount, amount_lin_viol, amount_norm_viol, amount_cvar_viol)
no_viol_Model <- lm(data=Violations, amount ~ time)
lin_viol_Model <- lm(data=Violations, amount_lin_viol~time)
norm_viol_Model <- lm(data=Violations, amount_norm_viol~time)
cvar_viol_Model <- lm(data=Violations, amount_cvar_viol~time)
P1 <- ggplot(data=Violations, aes(y=no_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle("No Violation") + xlab("Predicted Values") + ylab("Residuals")
P2 <- ggplot(data=Violations, aes(y=lin_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle("Violation of Linearity Assumption")+ xlab("Predicted Values") + ylab("Residuals")
P3 <- ggplot(data=Violations, aes(y=cvar_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle("Violation of Constant Variance Assumption")+ xlab("Predicted Values") + ylab("Residuals")
grid.arrange(P1, P2, P3, ncol=3)
P1 <- ggplot(data=Violations, aes(x=no_viol_Model$residuals)) + geom_histogram() + ggtitle("No Violation") +xlab("Residual")
P2 <- ggplot(data=Violations, aes(x=norm_viol_Model$residuals)) + geom_histogram() + ggtitle("Violation of Normality Assumption") + xlab("Residual")
grid.arrange(P1, P2, ncol=2)
P1 <- ggplot(data=Violations, aes(sample = scale(no_viol_Model$residuals))) + stat_qq() + stat_qq_line() + xlab("Normal Quantiles") + ylab("Residual Quantiles") + ggtitle("No Violation") + xlim(c(-4,4)) + ylim(c(-4,4))
P2 <- ggplot(data=Violations, aes(sample = scale(norm_viol_Model$residuals))) + stat_qq() + stat_qq_line() + xlab("Normal Quantiles") + ylab("Residual Quantiles") + ggtitle("Violation of Normality Assumption") + xlim(c(-4,4)) + ylim(c(-4,4))
grid.arrange(P1, P2, ncol=2)
LakesBP
P1 <- ggplot(data=FloridaLakes, aes(y=Lakes_M$residuals, x=Lakes_M$fitted.values)) + geom_point() + ggtitle("Residual vs Predicted Plot") + xlab("Predicted Values") + ylab("Residuals")
P2 <- ggplot(data=FloridaLakes, aes(x=Lakes_M$residuals)) + geom_histogram() + ggtitle("Histogram of Residuals") + xlab("Residual")
P3 <- ggplot(data=FloridaLakes, aes(sample = scale(Lakes_M$residuals))) + stat_qq() + stat_qq_line() + xlab("Normal Quantiles") + ylab("Residual Quantiles") + ggtitle("Normal QQ Plot")
grid.arrange(P1, P2, P3, ncol=3)
P1 <- ggplot(data=FloridaLakes, aes(y=M_pH$residuals, x=M_pH$fitted.values)) + geom_point() + ggtitle("Residual vs Predicted Plot") + xlab("Predicted Values") + ylab("Residuals")
P2 <- ggplot(data=FloridaLakes, aes(x=M_pH$residuals)) + geom_histogram() + ggtitle("Histogram of Residuals") + xlab("Residual")
P3 <- ggplot(data=FloridaLakes, aes(sample = scale(M_pH$residuals))) + stat_qq() + stat_qq_line() + xlab("Normal Quantiles") + ylab("Residual Quantiles") + ggtitle("Normal QQ Plot")
grid.arrange(P1, P2, P3, ncol=3)
P1 <- ggplot(data=Houses, aes(y=M_House_Int$residuals, x=M_House_Int$fitted.values)) + geom_point() + ggtitle("Residual vs Predicted Plot") + xlab("Predicted Values") + ylab("Residuals")
P2 <- ggplot(data=Houses, aes(x=M_House_Int$residuals)) + geom_histogram() + ggtitle("Histogram of Residuals") + xlab("Residual")
P3 <- ggplot(data=Houses, aes(sample = scale(M_House_Int$residuals))) + stat_qq() + stat_qq_line() + xlab("Normal Quantiles") + ylab("Residual Quantiles") + ggtitle("Normal QQ Plot")
grid.arrange(P1, P2, P3, ncol=3)
knitr::include_graphics("SLR_Model_Assumptions.png")
kable(t(round(Icecream1, 2)))
ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle("Icecream Dispensed") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed")
kable(t(round(Icecream1, 2)))
ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle("Icecream Dispensed") + xlab("Time Pressing dispenser") + ylab("Amount Dispensed") + geom_abline(slope=2, intercept=0, color="red") + stat_smooth(method="lm")
summary(IC_Model)
b0 <- IC_Model$coefficients[1]
b1 <- IC_Model$coefficients[2]
s <- sigma(IC_Model)
predict(IC_Model, newdata=data.frame(time=1.5), interval = "confidence", level=0.95)
predict(IC_Model, newdata=data.frame(time=1.5), interval = "prediction", level=0.95)
temp_var <- predict(IC_Model, interval="prediction")
new_df <- cbind(Icecream1, temp_var)
gf_point(amount~time, data=new_df) %>%
gf_labs(x="Time",
y="Amount") %>% gf_lm() +
geom_smooth(method=lm, se=TRUE) +
geom_line(aes(y=lwr), color = "red", linetype = "dashed") +
geom_line(aes(y=upr), color = "red", linetype = "dashed")
knitr::include_graphics("C_P_Band.png")
data(Cars2015)
Cars2015 <- Cars2015 %>% rename(Price=LowPrice)
CarsA060 <- ggplot(data=Cars2015, aes(x=Acc060, y=Price)) + geom_point()
CarsA060 + stat_smooth(method="lm", se=FALSE)
67/80
49/120
104/220
517/1020
sqrt(.408*(1-.408)/120)*2
s <- sqrt(sum(Lakes_M$residuals^2)/(53-2))
