# calculate proportion on time
p_hat <- num_ontime/75
head(S1)
num_ontime
p_hat
# Take sample of 75 flights
S1 <- sample_n(Flights_NY_CHI, 75)
# count number on time
num_ontime <- sum(S1$ontime == "Y")
# calculate proportion on time
p_hat <- num_ontime/75
head(S1)
num_ontime
p_hat
Prop_Samp_Dist<- ggplot(data=Samples_df, aes(x=p_hat_val)) +
geom_histogram(color="white", fill="blue") +
ggtitle("Sampling Distribution for Proportion On Time") +
xlab("Prop. on time in sample")
nreps <- 10000  # number of repetitions
p_hat_val <- rep(NA, nreps) # create vector to hold proportion of on-time arrivals
Sample <- 1:nreps
for(i in 1:nreps){
S <- sample_n(Flights_NY_CHI, 75) # take sample of 75
N_ontime <- sum(S$ontime == "Y") # count number of on-time arrivals
p_hat_val[i] <- N_ontime/75 # record proportion on-time
}
Samples_df <- data.frame(Sample, p_hat_val) # store results in a data frame
Prop_Samp_Dist<- ggplot(data=Samples_df, aes(x=p_hat_val)) +
geom_histogram(color="white", fill="blue") +
ggtitle("Sampling Distribution for Proportion On Time") +
xlab("Prop. on time in sample")
Prop_Samp_Dist
# calculate standard deviation of sampling distribution (This is called standard error)
SE_p_hat <- sd(Samples_df$p_hat_val)
SE_p_hat
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
S1
BootstrapSample1 <- sample_n(S1, 75, replace=TRUE) %>% arrange(year, month, day, carrier)
BootstrapSample1 %>% select(ID, Lake, Mercury)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 3, fig.width = 7, cache=TRUE)
library(tidyverse)
library(Lock5Data)
library(knitr)
options(scipen=999)
library(nycflights13)
data(flights)
Flights_NY_CHI <- flights %>% filter(dest %in% c("ORD", "MDW")) %>% filter(!is.na(arr_delay))
Flights_NY_CHI <- Flights_NY_CHI %>% mutate(ontime = ifelse(arr_delay <= 0, "Y", "N")) %>% select(year, month, day, carrier, origin, dest, sched_dep_time,arr_delay, ontime)
# Take sample of 75 flights
S1 <- sample_n(Flights_NY_CHI, 75)
# count number on time
num_ontime <- sum(S1$ontime == "Y")
# calculate proportion on time
p_hat <- num_ontime/75
head(S1)
num_ontime
p_hat
nreps <- 10000  # number of repetitions
p_hat_val <- rep(NA, nreps) # create vector to hold proportion of on-time arrivals
Sample <- 1:nreps
for(i in 1:nreps){
S <- sample_n(Flights_NY_CHI, 75) # take sample of 75
N_ontime <- sum(S$ontime == "Y") # count number of on-time arrivals
p_hat_val[i] <- N_ontime/75 # record proportion on-time
}
Samples_df <- data.frame(Sample, p_hat_val) # store results in a data frame
Prop_Samp_Dist<- ggplot(data=Samples_df, aes(x=p_hat_val)) +
geom_histogram(color="white", fill="blue") +
ggtitle("Sampling Distribution for Proportion On Time") +
xlab("Prop. on time in sample")
Prop_Samp_Dist
# calculate standard deviation of sampling distribution (This is called standard error)
SE_p_hat <- sd(Samples_df$p_hat_val)
SE_p_hat
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
BootstrapSample1 <- sample_n(S1, 75, replace=TRUE) %>% arrange(year, month, day, carrier)
BootstrapSample1
sum(BootstrapSample1$ontime == "Y") / 75
View(S1)
p_hat <- sum(S1$Flights =="Y")/75 #calculate sample statistic
Bootstrap_prop <- rep(NA, 10000)   #setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(S1, 75, replace=TRUE) #take bootstrap sample
Bootstrap_prop[i] <- sum(BootstrapSample$ontime == "Y")/75 # calc. prop ontime
}
Flights_Bootstrap_Prop <- data.frame(Bootstrap_prop)  #store values in a dataframe
Lakes_Bootstrap_Prop_plot <- ggplot(data=Flights_Bootstrap_Prop, aes(x=Bootstrap_prop)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Prop on Time in Bootstrap Sample ") + ylab("Frequency") +
ggtitle("Bootstrap Distribution for Proportion on Time") +
theme(legend.position = "none")
Lakes_Bootstrap_Prop_plot
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 3, fig.width = 7, cache=TRUE)
library(tidyverse)
library(Lock5Data)
library(knitr)
options(scipen=999)
library(nycflights13)
data(flights)
Flights_NY_CHI <- flights %>% filter(dest %in% c("ORD", "MDW")) %>% filter(!is.na(arr_delay))
Flights_NY_CHI <- Flights_NY_CHI %>% mutate(ontime = ifelse(arr_delay <= 0, "Y", "N")) %>% select(year, month, day, carrier, origin, dest, sched_dep_time,arr_delay, ontime)
# Take sample of 75 flights
S1 <- sample_n(Flights_NY_CHI, 75)
# count number on time
num_ontime <- sum(S1$ontime == "Y")
# calculate proportion on time
p_hat <- num_ontime/75
head(S1)
num_ontime
p_hat
nreps <- 10000  # number of repetitions
p_hat_val <- rep(NA, nreps) # create vector to hold proportion of on-time arrivals
Sample <- 1:nreps
for(i in 1:nreps){
S <- sample_n(Flights_NY_CHI, 75) # take sample of 75
N_ontime <- sum(S$ontime == "Y") # count number of on-time arrivals
p_hat_val[i] <- N_ontime/75 # record proportion on-time
}
Samples_df <- data.frame(Sample, p_hat_val) # store results in a data frame
Prop_Samp_Dist<- ggplot(data=Samples_df, aes(x=p_hat_val)) +
geom_histogram(color="white", fill="blue") +
ggtitle("Sampling Distribution for Proportion On Time") +
xlab("Prop. on time in sample")
Prop_Samp_Dist
# calculate standard deviation of sampling distribution (This is called standard error)
SE_p_hat <- sd(Samples_df$p_hat_val)
SE_p_hat
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
BootstrapSample1 <- sample_n(S1, 75, replace=TRUE) %>% arrange(year, month, day, carrier)
BootstrapSample1
sum(BootstrapSample1$ontime == "Y") / 75
p_hat <- sum(S1$Flights =="Y")/75 #calculate sample statistic
Bootstrap_prop <- rep(NA, 10000)   #setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(S1, 75, replace=TRUE) #take bootstrap sample
Bootstrap_prop[i] <- sum(BootstrapSample$ontime == "Y")/75 # calc. prop ontime
}
Flights_Bootstrap_Prop <- data.frame(Bootstrap_prop)  #store values in a dataframe
Lakes_Bootstrap_Prop_plot <- ggplot(data=Flights_Bootstrap_Prop, aes(x=Bootstrap_prop)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Prop on Time in Bootstrap Sample ") + ylab("Frequency") +
ggtitle("Bootstrap Distribution for Proportion on Time") +
theme(legend.position = "none")
Lakes_Bootstrap_Prop_plot
SE_p_hat <- sd(Flights_Bootstrap_Prop$Bootstrap_prop)
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
phat
p_hat
p_hat <- sum(S1$ontime =="Y")/75 #calculate sample statistic
Bootstrap_prop <- rep(NA, 10000)   #setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(S1, 75, replace=TRUE) #take bootstrap sample
Bootstrap_prop[i] <- sum(BootstrapSample$ontime == "Y")/75 # calc. prop ontime
}
Flights_Bootstrap_Prop <- data.frame(Bootstrap_prop)  #store values in a dataframe
Lakes_Bootstrap_Prop_plot <- ggplot(data=Flights_Bootstrap_Prop, aes(x=Bootstrap_prop)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Prop on Time in Bootstrap Sample ") + ylab("Frequency") +
ggtitle("Bootstrap Distribution for Proportion on Time") +
theme(legend.position = "none")
Lakes_Bootstrap_Prop_plot
SE_p_hat <- sd(Flights_Bootstrap_Prop$Bootstrap_prop)
SE_p_hat <- sd(Flights_Bootstrap_Prop$Bootstrap_prop)
SE_p_hat
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
knitr::opts_chunk$set(echo = TRUE)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot() + geom_jitter()
library(ggplot)
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot() + geom_jitter()
?geom_boxplot
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip()
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip() + xlim(c(0,1.5))
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip() + ylim(c(0,1.5))
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip() + ylim(c(0,1.5))
df %>% group_by(Location) %>% summarize(Mean_Mercury = mean(Mercury),
SD_Mercury = sd(Mercury),
N = n())
library(tidyverse)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip() + ylim(c(0,1.5))
?fig.pos
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, fig.align="center)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, fig.align="center")
library(tidyverse)
library(knitr)
x1 <- rnorm(33, 0.4, 0.2)
x2 <- rnorm(20, 0.7, 0.2)
Location <- c(rep("N", 33), rep("S", 20))
Mercury <- c(x1, x2)
df <- data.frame(Location, Mercury)
ggplot(data=df, aes(x=Location, y=Mercury)) + geom_boxplot(outlier.shape = NULL) + geom_jitter() + coord_flip() + ylim(c(0,1.5))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c("15", "7", "6", "6", "5", "14")
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=Score, y=Number)) + geom_bar(stat="identity")
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=Score, y=Number)) + geom_bar(stat="identity")
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=Score, y=Number)) + geom_bar(stat="identity") + scale_x_reverse()
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=Score, y=Number)) + geom_bar(stat="identity") + scale_x_discrete(limits = rev(levels(Score)))
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=reorder(Score, levels= c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")), y=Number)) + geom_bar(stat="identity")
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=reorder(Score, desc(Score)), y=Number)) + geom_bar(stat="identity")
Score <- c("20", "18-19", "16-17", "14-15", "12-13", "11 or under")
Number <- c(15,7,6,6,5,14)
df <- data.frame(Score, Number)
ggplot(data=df, aes(x=reorder(Score, desc(Score)), y=Number)) + geom_bar(stat="identity", fill="blue") + xlab("Number") + ylab("Frequency")
knitr::opts_chunk$set(echo = TRUE)
library(Bolstad)
library(tidyverse)
data(bears)
glimpse(bears)
head(bears)
Bears_Subset <- bears %>% filter(Obs.No == 1)
Bears_Subset$Month <- as.factor(Bears_Subset$Month)
Bears_Subset$Sex <- as.factor(Bears_Subset$Sex)
Bears_Subset$Sex <- ifelse(Bears_Subset$Sex == "1", "M", "F") %>% as.factor()
Bears_Subset$Age <- Bears_Subset$Age-8
sd(Flight433)
data(Flight433)
data("Flight433")
data("Flight433")
head(Flight433)
library(Lock5Data)
data("Flight433")
head(Flight433)
mean <- mean(Flight433$AirTime)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(Flight433, 28, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$AirTime) # calculate mean in bootstrap sample
}
sd(Flight433)
sd(Flight433$AirTime)
53.31-51.73
136/200
head(ACSSample)
library(openintro)
data(acs12)
ACSSample <- acs12 %>% filter(employment %in% c("employed", "unemployed") & age>=18) %>%
select(income, employment, age, edu) %>% head(100)
head(ACSSample)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 4, fig.width = 6)
library(tidyverse)
set.seed(09272021)
library(openintro)
data(acs12)
ACSSample <- acs12 %>% filter(employment %in% c("employed", "unemployed") & age>=18) %>%
select(income, employment, age, edu) %>% head(100)
head(ACSSample)
library(openintro)
data(acs12)
ACSSample <- acs12 %>% filter(employment %in% c("employed") & age>=18) %>%
select(income, employment, age, edu) %>% head(100)
head(ACSSample)
mean <- mean(ACS$income)  #calculate sample statistic
mean <- mean(ACSSample$income)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:1000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$income) # calculate mean in bootstrap sample
}
Bootstrap_Results_Mean <- data.frame(Bootstrap_Mean)  #store results in data frame
Lakes_Bootstrap_Mean_Plot <- ggplot(data=Lakes_Bootstrap_Results_Mean,
aes(x=Bootstrap_Mean)) +
geom_histogram(color="white", fill="lightblue") +
xlab("Mean Mercury in Bootstrap Sample ") + ylab("Frequency") +
ggtitle("Bootstrap Distribution for Sample Mean in Florida Lakes") +
theme(legend.position = "none")
mean <- mean(ACSSample$income)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:1000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$income) # calculate mean in bootstrap sample
}
Bootstrap_Results_Mean <- data.frame(Bootstrap_Mean)  #store results in data frame
Bootstrap_Mean_Plot <- ggplot(data=Bootstrap_Results_Mean,
aes(x=Bootstrap_Mean)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle("Bootstrap Distribution") +
theme(legend.position = "none")
Lakes_Bootstrap_Mean_Plot
Bootstrap_Mean_Plot <- ggplot(data=Bootstrap_Results_Mean,
aes(x=Bootstrap_Mean)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle("Bootstrap Distribution") +
theme(legend.position = "none")
Bootstrap_Mean_Plot
mean <- mean(ACSSample$income)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$income) # calculate mean in bootstrap sample
}
Bootstrap_Results_Mean <- data.frame(Bootstrap_Mean)  #store results in data frame
Bootstrap_Mean_Plot <- ggplot(data=Bootstrap_Results_Mean,
aes(x=Bootstrap_Mean)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle("Bootstrap Distribution") +
theme(legend.position = "none")
Bootstrap_Mean_Plot
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 4, fig.width = 6)
library(tidyverse)
set.seed(09272021)
library(openintro)
data(acs12)
ACSSample <- acs12 %>% filter(employment %in% c("employed") & age>=18) %>%
select(income, employment, age, edu) %>% head(100)
head(ACSSample)
mean <- mean(ACSSample$income)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$income) # calculate mean in bootstrap sample
}
Bootstrap_Results_Mean <- data.frame(Bootstrap_Mean)  #store results in data frame
Bootstrap_Mean_Plot <- ggplot(data=Bootstrap_Results_Mean,
aes(x=Bootstrap_Mean)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle("Bootstrap Distribution") +
theme(legend.position = "none")
Bootstrap_Mean_Plot
SE_mean <- sd(Bootstrap_Results_Mean$Bootstrap_Mean)
SE_mean
c(mean - 2*SE_mean, mean + 2*SE_mean)
Bootstrap_Mean_Plot +
geom_segment(aes(x=mean - 2*SE_mean,xend=mean + 2*SE_mean, y=50, yend=50),
color="gold", size=10, alpha=0.01)
ggplot(data=ACSSample, aes(x=Age, y=Income)) + geom_point()
ggplot(data=ACSSample, aes(x=age, y=Income)) + geom_point()
ggplot(data=ACSSample, aes(x=age, y=income)) + geom_point()
ggplot(data=ACSSample, aes(x=age, y=income)) + geom_point() +
stat_smooth(method="lm", se=FALSE)
ggplot(data=ACSSample, aes(x=age, y=income)) + geom_point() +
stat_smooth(method="lm", se=FALSE)
M1 <- lm(data = ACSSample, income~age)
slope <- M1$coef[2]
M1
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample , 100, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, income ~ age) # fit linear model
Bootstrap_b0[i] <- M$coefficients[1] # record b0
Bootstrap_b1[i] <- M$coefficients[2] # record b1
}
Bootstrap_b0 <- rep(NA, 10000) # setup vector to hold bootstrap statistics
Bootstrap_b1 <- rep(NA, 10000) # setup vector to hold bootstrap statistics
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample , 100, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, income ~ age) # fit linear model
Bootstrap_b0[i] <- M$coefficients[1] # record b0
Bootstrap_b1[i] <- M$coefficients[2] # record b1
}
Bootstrap_Results2 <- data.frame(Bootstrap_b0, Bootstrap_b1)  #save results as dataframe
Bootstrap_Plot_Slope <- ggplot(data=Bootstrap_Results2, aes(x=Bootstrap_b1)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution for Slope")
Bootstrap_Plot_Slope
SE_b1 <- sd(Bootstrap_Results2$Bootstrap_b1)
SE_b1
c(Sample_b1 - 2*SE_b1, Sample_b1 + 2*SE_b1)
c(Slope - 2*SE_b1, Slope + 2*SE_b1)
c(slope - 2*SE_b1, slope + 2*SE_b1)
Bootstrap_Plot_Slope +
geom_segment(aes(x=Sample_b1 - 2*SE_b1,xend=Sample_b1 + 2*SE_b1, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Bootstrap_Plot_Slope +
geom_segment(aes(x=slope - 2*SE_b1,xend=slope + 2*SE_b1, y=50, yend=50),
color="gold", size=10, alpha=0.01)
summary(ACSSample$edu)
M <- lm(data=ACSSample, income ~ age + edu)
summary(M)
ggplot(data=ACSSample, aes(x=age, y=income, color=edu)) + geom_point() +
stat_smooth(method="lm", se=FALSE)
M2 <- lm(data = ACSSample, income~age*college)
M2 <- lm(data = ACSSample, income~age*edu)
M2
# Predicted income for 40 year old college grad.
# b0 + b1*40 + b2 + b3*40
15136.0 + 241.6*40 + -78093.2 + 3217.2*40
Bootstrap_b0 <- rep(NA, 10000)  #vector to store b0 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b2 <- rep(NA, 10000)  #vector to store b2 values
Bootstrap_b3 <- rep(NA, 10000)  #vector to store b3 values
Bootstrap_b4 <- rep(NA, 10000)  #vector to store b4 values
Bootstrap_b5 <- rep(NA, 10000)  #vector to store b5 values
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE)   #take bootstrap sample
Mb <- lm(data=BootstrapSample, income ~ age*edu) # fit linear model with interaction
Bootstrap_b0[i] <- Mb$coefficients[1] # record value of b0 (first coefficient)
Bootstrap_b1[i] <- Mb$coefficients[2] # record value of b1 (second coefficient)
Bootstrap_b2[i] <- Mb$coefficients[3] # record value of b2 (third coefficient)
Bootstrap_b3[i] <- Mb$coefficients[4] # record value of b3 (fourth coefficient)
Bootstrap_b4[i] <- Mb$coefficients[5] # record value of b4 (fifth coefficient)
Bootstrap_b5[i] <- Mb$coefficients[6] # record value of b5 (sixth coefficient)
}
# calculate estimated average income of 40 year old college graduates in bootstrap sample
Bootstrap_Estimate <-  Bootstrap_b0 + 40*Bootstrap_b1 + Bootstrap_b2 + 40*Bootstrap_b3
Bootstrap_Results3 <- data.frame(Bootstrap_Estimate)  #save results as dataframe
Bootstrap_Plot_Est <- ggplot(data=Bootstrap_Results3, aes(x=Bootstrap_Estimate)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution for Estimated Income of Age 40 College Grad")
Bootstrap_Plot_Est
SE_Est <- sd(Bootstrap_Results3$Bootstrap_Estimate)
SE_Est
# b0 + b1*40 + b2 + b4*40
Est <- 15136.0 + 241.6*40 + -78093.2 + 3217.2*40
Est
c(Est - 2*SE_Est, Est + 2*SE_Est)
Bootstrap_b0 <- rep(NA, 10000)  #vector to store b0 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b2 <- rep(NA, 10000)  #vector to store b2 values
Bootstrap_b3 <- rep(NA, 10000)  #vector to store b3 values
Bootstrap_b4 <- rep(NA, 10000)  #vector to store b4 values
Bootstrap_b5 <- rep(NA, 10000)  #vector to store b5 values
for (i in 1:10000){
BootstrapSample <- sample_n(ACSSample, 100, replace=TRUE)   #take bootstrap sample
Mb <- lm(data=BootstrapSample, income ~ age*edu) # fit linear model with interaction
Bootstrap_b0[i] <- Mb$coefficients[1] # record value of b0 (first coefficient)
Bootstrap_b1[i] <- Mb$coefficients[2] # record value of b1 (second coefficient)
Bootstrap_b2[i] <- Mb$coefficients[3] # record value of b2 (third coefficient)
Bootstrap_b3[i] <- Mb$coefficients[4] # record value of b3 (fourth coefficient)
Bootstrap_b4[i] <- Mb$coefficients[5] # record value of b4 (fifth coefficient)
Bootstrap_b5[i] <- Mb$coefficients[6] # record value of b5 (sixth coefficient)
}
# calculate estimated average income of 40 year old college graduates in bootstrap sample
Bootstrap_Estimate <-  Bootstrap_b0 + 40*Bootstrap_b1 + Bootstrap_b2 + 40*Bootstrap_b4
Bootstrap_Results3 <- data.frame(Bootstrap_Estimate)  #save results as dataframe
Bootstrap_Plot_Est <- ggplot(data=Bootstrap_Results3, aes(x=Bootstrap_Estimate)) +
geom_histogram(color="white", fill="lightblue") +
xlab("") + ylab("Frequency") +
ggtitle( "Bootstrap Distribution for Estimated Income of Age 40 College Grad")
Bootstrap_Plot_Est
SE_Est <- sd(Bootstrap_Results3$Bootstrap_Estimate)
SE_Est
c(Est - 2*SE_Est, Est + 2*SE_Est)
Bootstrap_Plot_Slope +
geom_segment(aes(x=slope - 2*SE_b1,xend=slope + 2*SE_b1, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Bootstrap_Plot_Est +
geom_segment(aes(x=Est - 2*SE_Est,xend=slope + 2*SE_Est, y=50, yend=50),
color="gold", size=10, alpha=0.01)
Bootstrap_Plot_Est +
geom_segment(aes(x=Est - 2*SE_Est,xend=Est + 2*SE_Est, y=50, yend=50),
color="gold", size=10, alpha=0.01)
